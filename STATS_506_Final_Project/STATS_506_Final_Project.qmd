---
title: "STATS_506_Final_Project"
format: 
  html:
      code-fold: true
      code-summary: "Show the code"
      embed-resources: true
      smooth-scroll: true
      mathjax: "default"
      toc: true
      toc_float: true
      toc_collapsed: true
      toc_depth: 3
      number_sections: true
      theme: lumen
editor: visual
author: Jie He
execute:
  warning: false
---

## Final Project

### Data Preprocess

Load Packages

```{r message=FALSE, warning=FALSE}
library(data.table)
library(ggplot2)
library(tigris)
library(sf)
library(lme4)
library(broom.mixed)
library(dplyr)
library(kableExtra)
```

Load dataset

```{r message=FALSE}
soi <- fread("/Users/hejie/Downloads/STATS 506/Final Project 506/20zpallnoagi.csv")

medcare <- fread("/Users/hejie/Downloads/STATS 506/Final Project 506/Medicare Physician & Other Practitioners - by Provider and Service/2020/MUP_PHY_R22_P05_V10_D20_Prov_Svc.csv")
```

Preprocess

```{r}
# Rename key variables in the SOI dataset for clarity
setnames(soi, c("ZIPCODE", "N2", "A00100", "A10600", "A17000"), c("zipcode", "num_individual", "agi", "tax_pymt", "med_deduction"))

# Rename key variables in the Medicare dataset for clarity
setnames(medcare, c("Rndrng_Prvdr_Zip5", "Rndrng_Prvdr_RUCA", "Rndrng_Prvdr_Ent_Cd", "Rndrng_NPI"), c("zipcode", "ruca", "entity_type", "npi"))


# Aggregate Medicare data at the provider level
# Summarize total services, total beneficiaries, and average payments by NPI
medcare_provider <- medcare[, .(
  zipcode = first(zipcode),
  ruca = first(ruca),
  entity_type = first(entity_type),
  num_srvcs = sum(Tot_Srvcs, na.rm = TRUE),
  num_benes = sum(Tot_Benes, na.rm = TRUE),
  avg_pymt = mean(Avg_Mdcr_Pymt_Amt, na.rm = TRUE)
), keyby = npi]


# Transform zip code in SOI dataset to character
# Calculate the average AGI per individual
soi <- soi[, ':='(
  zipcode = as.character(zipcode),
  avg_agi = agi/num_individual
)]

# Classify RUCA codes into broader categories (Metropolitan, Micropolitan, etc.)
medcare_provider <- medcare_provider [, ':='(
  entity_type = as.factor(entity_type),
  new_ruca = fcase(
    ruca %in% c("1","1.1","2","2.1","3"), "Metropolitan",
    ruca %in% c("4","4.1","5","5.1","6"), "Micropolitan",
    ruca %in% c("7","7.1","7.2","8","8.1","8.2","9"), "Small town",
    ruca %in% c("10","10.1","10.2","10.3"), "Rural areas",
    ruca %in% c("99"), "Zero population")
)][, -c("ruca")]

# Merge the datasets by zip code
merged <- merge(medcare_provider, soi[, .(zipcode, avg_agi, agi)], by = "zipcode")
```

### Descriptive Analysis

```{r}
# Compute median values of key metrics by provider entity type
summary_table1 <- merged[, .(
  median_avg_agi = median(avg_agi, na.rm = TRUE),
  median_num_benes = median(num_benes, na.rm = TRUE),
  median_num_srvcs = median(num_srvcs, na.rm = TRUE),
  median_avg_pymt = median(avg_pymt, na.rm = TRUE)
), by = .(entity_type)]

# Compute median values of key metrics by rural-urban classification
summary_table2 <- merged[, .(
  median_avg_agi = median(avg_agi, na.rm = TRUE),
  median_num_benes = median(num_benes, na.rm = TRUE),
  median_num_srvcs = median(num_srvcs, na.rm = TRUE),
  median_avg_pymt = median(avg_pymt, na.rm = TRUE)
), by = .(new_ruca)]

# Convert data to a long format for easier plotting or manipulation
long_table1 <- melt(
  summary_table1,
  id.vars = c("entity_type"),
  measure.vars = c("median_avg_agi", "median_num_benes", "median_num_srvcs", "median_avg_pymt"),
  variable.name = "metric",
  value.name = "value"
)

long_table2 <- melt(
  summary_table2,
  id.vars = c("new_ruca"),
  measure.vars = c("median_avg_agi", "median_num_benes", "median_num_srvcs", "median_avg_pymt"),
  variable.name = "metric",
  value.name = "value"
) %>% na.omit()

# Convert back to wide format for presentation
wide_table1 <- dcast(
  long_table1,
  metric ~ entity_type,
  value.var = "value"
)

wide_table2 <- dcast(
  long_table2,
  metric ~ new_ruca,
  value.var = "value"
)

# Merge tables
wide_table <- merge(wide_table1, wide_table2, by = "metric")

# Replace metric names with more descriptive labels
wide_table[, metric := gsub("median_avg_agi", "Median Average Adjusted Gross Income (in thousand dollars)", metric)]
wide_table[, metric := gsub("median_num_srvcs", "Median Number of Medical Services", metric)]
wide_table[, metric := gsub("median_num_benes", "Median Number of Medicare Beneficiaries", metric)]
wide_table[, metric := gsub("median_avg_pymt", "Median Average Medicare Payment (in dollars)", metric)]

# Rename columns to be more descriptive
setnames(wide_table, old = "I", new = "Individual")
setnames(wide_table, old = "O", new = "Organization")

# Display the summary table
table1 <- kable(wide_table, caption = "Table 1. Descriptive Statistics by Entity Type and Rural-Urban Status") %>%
  kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
table1
```

Mapping and Visualization

```{r message=FALSE, warning=FALSE, include=FALSE}
# Load ZCTA (ZIP Code Tabulation Area) shapefiles
zctas <- zctas(year = 2020)
zctas_dt <- as.data.table(zctas)

# Aggregate by zip code using keys
medcare_zip <- medcare_provider[, .(
  num_srvcs = sum(num_srvcs, na.rm = TRUE),
  num_benes = sum(num_benes, na.rm = TRUE),
  avg_pymt = mean(avg_pymt, na.rm = TRUE)
), keyby = zipcode]

# Merge with SOI data
merged_zip <- merge(medcare_zip, soi[, .(zipcode, avg_agi)], by = "zipcode")

# Ensure ZIP codes are zero-padded for matching with ZCTA codes
merged_zip[, zipcode := sprintf("%05d", as.integer(zipcode))]

# Join spatial data with merged dataset
zcta_data_dt <- merge(zctas_dt, merged_zip, by.x = "ZCTA5CE20", by.y = "zipcode", all.x = FALSE, all.y = FALSE)

# Convert back to sf to plot
zcta_data <- st_as_sf(zcta_data_dt, sf_column_name = "geometry")
```

Map: Adjusted Gross Income (AGI) by ZIP Code

```{r}
ggplot(zcta_data) +
  geom_sf(aes(fill = log(avg_agi)), color = NA) +
  scale_fill_viridis_c(option = "plasma", direction = -1) +
  theme_minimal() +
  labs(title="Adjusted Gross Income (AGI) by ZIP Code", fill="Log-scaled AGI")
```

Map: Number of Medical Services by ZIP Code

```{r}
ggplot(zcta_data) +
  geom_sf(aes(fill = log(num_srvcs)), color = NA) +
  scale_fill_viridis_c(option = "plasma", direction = -1) +
  theme_minimal() +
  labs(title="Number of Services by ZIP Code", fill="Log-scaled Number of Services")
```

Map: Average Medicare Payment by ZIP Code

```{r}
ggplot(zcta_data) +
  geom_sf(aes(fill = log(avg_pymt)), color = NA) +
  scale_fill_viridis_c(option = "plasma", direction = -1) +
  theme_minimal() +
  labs(title="Average Medicare Payment by ZIP Code", fill="Log-scaled Average Payment")
```

Map: Number of Medicare Beneficiaries by ZIP Code

```{r}
ggplot(zcta_data) +
  geom_sf(aes(fill = log(num_benes)), color = NA) +
  scale_fill_viridis_c(option = "plasma", direction = -1) +
  theme_minimal() +
  labs(title="Number of Medicare Beneficiaries by ZIP Code", fill="Log-scaled Number of Beneficiaries")
```

### Bivariate Analysis

Scatterplots with log-transformations to visualize relationships

AGI and Number of Services

```{r}
ggplot(merged, aes(x=log(avg_agi), y=log(num_srvcs))) +
  geom_point() +
  geom_smooth(method="lm", col="red") +
  theme_minimal()
```

AGI and Average Medicare Payment

```{r}
ggplot(merged, aes(x=log(avg_agi), y=log(avg_pymt))) +
  geom_point() +
  geom_smooth(method="lm", col="red") +
  theme_minimal()
```

AGI and Number of Medicare Beneficiaries

```{r}
ggplot(merged, aes(x=log(avg_agi), y=log(num_benes))) +
  geom_point() +
  geom_smooth(method="lm", col="red") +
  theme_minimal()
```

### Regression Analysis

Applied linear mixed-effects models to account for clustering by ZIP code

Outcome: Number of Medical Services

```{r}
# Unadjusted model: number of services as outcome, AGI as predictor, random intercept by ZIP code
mod1 <- lmer(log(num_srvcs) ~ I(avg_agi/100) + (1|zipcode), merged)
tidy_mod1 <- tidy(mod1, conf.int = TRUE, exponentiate = TRUE)
tidy_mod1

# Adjusted model: adds rural-urban classification and entity type as predictors
mod1_adj <- lmer(log(num_srvcs) ~ I(avg_agi/100) + (1|zipcode) + new_ruca + entity_type, merged)
tidy_mod1_adj <- tidy(mod1_adj, conf.int = TRUE, exponentiate = TRUE)
tidy_mod1_adj
```

Outcome: Average Medicare Payment

```{r}
# Unadjusted model
mod2 <- lmer(log(avg_pymt+0.001) ~ I(avg_agi/100) + (1|zipcode), merged)
tidy_mod2 <- tidy(mod2, conf.int = TRUE, exponentiate = TRUE)
tidy_mod2

# Adjusted model
mod2_adj <- lmer(log(avg_pymt+0.001) ~ I(avg_agi/100) + (1|zipcode) + new_ruca + entity_type, merged)
tidy_mod2_adj <- tidy(mod2_adj, conf.int = TRUE, exponentiate = TRUE)
tidy_mod2_adj
```

Outcome: Number of Medicare Beneficiaries

```{r}
# Unadjusted model
mod3 <- lmer(log(num_benes) ~ I(avg_agi/100) + (1|zipcode), merged)
tidy_mod3 <- tidy(mod3, conf.int = TRUE, exponentiate = TRUE)
tidy_mod3

# Adjusted model
mod3_adj <- lmer(log(num_benes) ~ I(avg_agi/100) + (1|zipcode) + new_ruca + entity_type, merged)
tidy_mod3_adj <- tidy(mod3_adj, conf.int = TRUE, exponentiate = TRUE)
tidy_mod3_adj
```

```{r}
# Combine results from all models for presentation
unadjusted_model <- rbind(tidy_mod1[2, c(4,7,8)] %>% 
                            mutate(Outcome = "Number of Medical Services",
                                   Model = "Unadjusted"), 
                          tidy_mod2[2, c(4,7,8)] %>% 
                            mutate(Outcome = "Average Medicare Payment",
                                   Model = "Unadjusted"),
                          tidy_mod3[2, c(4,7,8)] %>% 
                            mutate(Outcome = "Number of Medicare Beneficiaries",
                                   Model = "Unadjusted")) 

adjusted_model <- rbind(tidy_mod1_adj[2, c(4,7,8)] %>% 
                            mutate(Outcome = "Number of Medical Services",
                                   Model = "Adjusted"), 
                          tidy_mod2_adj[2, c(4,7,8)] %>% 
                            mutate(Outcome = "Average Medicare Payment",
                                   Model = "Adjusted"),
                          tidy_mod3_adj[2, c(4,7,8)] %>% 
                            mutate(Outcome = "Number of Medicare Beneficiaries",
                                   Model = "Adjusted")) 
models <- rbind(unadjusted_model, adjusted_model)[, c(5,4,1,2,3)]

# Display key model coefficients and confidence intervals
table2 <- kable(models, caption = "Table 2. Model Coefficients and 95% CI for All Models") %>%
  kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
table2
```
